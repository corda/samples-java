import static org.gradle.api.JavaVersion.VERSION_17

buildscript { //properties that you need to build the project

    Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_shell_version = corda_release_version
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        quasar_exclusions = [
                'co.paralleluniverse**',
                'groovy**',
                'com.esotericsoftware.**',
                'jdk**',
                'junit**',
                'kotlin**',
                'net.rubygrapefruit.**',
                'org.gradle.**',
                'org.apache.**',
                'org.jacoco.**',
                'org.junit**',
                'org.slf4j**',
                'worker.org.gradle.**',
                'org.mockito.kotlin**',
                'org.assertj**',
                'org.hamcrest**',
                'org.mockito**',
                'org.opentest4j**',
                'org.springframework**'
        ]
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        //springboot
        spring_boot_version = '3.2.5'
        spring_boot_gradle_plugin_version = '3.2.5'
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            url 'https://download.corda.net/maven/corda-releases'
            mavenContent {
                releasesOnly()
            }
        }
        maven { url 'https://download.corda.net/maven/corda-dev' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects { //Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/../repositories.gradle"
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://download.corda.net/maven/corda-releases' }
    }

    java {
        sourceCompatibility = VERSION_17
        targetCompatibility = VERSION_17
    }

    compileJava {
        options.compilerArgs << '-parameters'
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencies
dependencies {
    // Corda dependencies.
    // Corda dependencies.
    cordaBootstrapper "$corda_release_group:corda-node-api:$corda_release_version"
    corda "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")

    cordaProvided "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaProvided "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"
    cordaProvided "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaProvided "org.slf4j:jul-to-slf4j:$slf4j_version"
    cordaDriver "net.corda:corda-shell:$corda_shell_version"
}

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':workflows')
        runSchemaMigration = true //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        runSchemaMigration = true
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        runSchemaMigration = true
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}
