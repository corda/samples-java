import static org.gradle.api.JavaVersion.VERSION_11

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    workflow {
        name "Cordapp-example Flows"
        vendor "Corda Open Source"
        licence "Apache License, Version 2.0"
        versionId 1
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
//            java.outputDir = file('bin/main')
        }
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
    test {
        java {
            srcDir 'src/test/java'
//            java.outputDir = file('bin/main')
        }
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    testImplementation "junit:junit:$junit_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // Corda dependencies.
    cordaProvided "$corda_core_release_group:corda-core:$corda_core_release_version"
    corda  "$corda_release_group:corda:$corda_release_version"
    testImplementation "$corda_release_group:corda-node-driver:$corda_release_version"
    cordaProvided group: 'com.google.guava', name: 'guava', version: '23.5-jre'


    // CorDapp dependencies.
    cordapp project(":contracts")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        languageVersion = "1.8"
        apiVersion = "1.8"
        jvmTarget = VERSION_11
        javaParameters = true   // Useful for reflection.
    }
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

test {
    jvmArgs = [  '--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED',
                 '--add-exports', 'javafx.base/com.sun.javafx=ALL-UNNAMED',
                 '--add-exports', 'javafx.base/com.sun.javafx.collections=ALL-UNNAMED',
                 '--add-opens', 'java.base/java.time=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                 '--add-opens', 'java.base/java.util=ALL-UNNAMED', '--add-opens', 'java.base/java.net=ALL-UNNAMED',
                 '--add-opens', 'java.base/java.nio=ALL-UNNAMED', '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
                 '--add-opens', 'java.base/java.security.cert=ALL-UNNAMED', '--add-opens', 'java.base/java.security=ALL-UNNAMED',
                 '--add-opens', 'java.base/javax.net.ssl=ALL-UNNAMED', '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                 '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED', '--add-opens', 'java.sql/java.sql=ALL-UNNAMED',]
}